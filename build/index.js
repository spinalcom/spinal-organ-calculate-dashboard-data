"use strict";

var _constants = require("./constants");

var _SpinalCalNode = require("./SpinalCalNode");

var _SpinalCalNode2 = _interopRequireDefault(_SpinalCalNode);

var _SpinalCalculate = require("./SpinalCalculate");

var _SpinalCalculate2 = _interopRequireDefault(_SpinalCalculate);

var _config = require("../config.json");

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Main {

  constructor(username, password, host, port, filePath) {
    this.url = `http://${username}:${password}@${host}:${port}/`;
    this.path = filePath;
  }

  getGraph(_file) {

    if (_file.graph instanceof _constants.Ptr) {
      return _file.graph.load();
    }
    return Promise.resolve(_file.graph);
  }

  getBimObject(_graph) {
    return _graph.getContext("BIMObjectContext").then(bimContext => {
      let bimObjects = [];
      return bimContext.getChildren(["hasBIMObject"]).then(bims => {
        bims.forEach(element => {
          bimObjects.push(new _SpinalCalNode2.default(element));
        });
        return bimObjects;
      });
    });
  }

  start() {
    _constants.spinalCore.load(_constants.spinalCore.connect(this.url), this.path, _file => {
      this.getGraph(_file).then(graph => {
        this.getBimObject(graph).then(bimObjects => {
          new _SpinalCalculate2.default(bimObjects);
        });
      });
    });
  }

}

let main = new Main(_config2.default.user, _config2.default.password, _config2.default.host, _config2.default.port, _config2.default.path);

main.start();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJNYWluIiwiY29uc3RydWN0b3IiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiaG9zdCIsInBvcnQiLCJmaWxlUGF0aCIsInVybCIsInBhdGgiLCJnZXRHcmFwaCIsIl9maWxlIiwiZ3JhcGgiLCJQdHIiLCJsb2FkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJnZXRCaW1PYmplY3QiLCJfZ3JhcGgiLCJnZXRDb250ZXh0IiwidGhlbiIsImJpbUNvbnRleHQiLCJiaW1PYmplY3RzIiwiZ2V0Q2hpbGRyZW4iLCJiaW1zIiwiZm9yRWFjaCIsImVsZW1lbnQiLCJwdXNoIiwiU3BpbmFsQ2FsTm9kZSIsInN0YXJ0Iiwic3BpbmFsQ29yZSIsImNvbm5lY3QiLCJTcGluYWxDYWxjdWxhdGUiLCJtYWluIiwiY29uZmlnIiwidXNlciJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFNQTs7OztBQUNBOzs7O0FBRUE7Ozs7OztBQUdBLE1BQU1BLElBQU4sQ0FBVzs7QUFFVEMsY0FBWUMsUUFBWixFQUFzQkMsUUFBdEIsRUFBZ0NDLElBQWhDLEVBQXNDQyxJQUF0QyxFQUE0Q0MsUUFBNUMsRUFBc0Q7QUFDcEQsU0FBS0MsR0FBTCxHQUFZLFVBQVNMLFFBQVMsSUFBR0MsUUFBUyxJQUFHQyxJQUFLLElBQUdDLElBQUssR0FBMUQ7QUFDQSxTQUFLRyxJQUFMLEdBQVlGLFFBQVo7QUFDRDs7QUFFREcsV0FBU0MsS0FBVCxFQUFnQjs7QUFFZCxRQUFJQSxNQUFNQyxLQUFOLFlBQXVCQyxjQUEzQixFQUFnQztBQUM5QixhQUFPRixNQUFNQyxLQUFOLENBQVlFLElBQVosRUFBUDtBQUNEO0FBQ0QsV0FBT0MsUUFBUUMsT0FBUixDQUFnQkwsTUFBTUMsS0FBdEIsQ0FBUDtBQUVEOztBQUVESyxlQUFhQyxNQUFiLEVBQXFCO0FBQ25CLFdBQU9BLE9BQU9DLFVBQVAsQ0FBa0Isa0JBQWxCLEVBQ0pDLElBREksQ0FDQ0MsY0FBYztBQUNsQixVQUFJQyxhQUFhLEVBQWpCO0FBQ0EsYUFBT0QsV0FBV0UsV0FBWCxDQUF1QixDQUFDLGNBQUQsQ0FBdkIsRUFBeUNILElBQXpDLENBQThDSSxRQUFRO0FBQzNEQSxhQUFLQyxPQUFMLENBQWFDLFdBQVc7QUFDdEJKLHFCQUFXSyxJQUFYLENBQWdCLElBQUlDLHVCQUFKLENBQWtCRixPQUFsQixDQUFoQjtBQUNELFNBRkQ7QUFHQSxlQUFPSixVQUFQO0FBQ0QsT0FMTSxDQUFQO0FBT0QsS0FWSSxDQUFQO0FBV0Q7O0FBRURPLFVBQVE7QUFDTkMsMEJBQVdoQixJQUFYLENBQWdCZ0Isc0JBQVdDLE9BQVgsQ0FBbUIsS0FBS3ZCLEdBQXhCLENBQWhCLEVBQThDLEtBQUtDLElBQW5ELEVBQXlERSxTQUFTO0FBQ2hFLFdBQUtELFFBQUwsQ0FBY0MsS0FBZCxFQUFxQlMsSUFBckIsQ0FBMEJSLFNBQVM7QUFDakMsYUFBS0ssWUFBTCxDQUFrQkwsS0FBbEIsRUFBeUJRLElBQXpCLENBQThCRSxjQUFjO0FBQzFDLGNBQUlVLHlCQUFKLENBQW9CVixVQUFwQjtBQUNELFNBRkQ7QUFHRCxPQUpEO0FBS0QsS0FORDtBQU9EOztBQXRDUTs7QUErQ1gsSUFBSVcsT0FBTyxJQUFJaEMsSUFBSixDQUFTaUMsaUJBQU9DLElBQWhCLEVBQXNCRCxpQkFBTzlCLFFBQTdCLEVBQXVDOEIsaUJBQU83QixJQUE5QyxFQUFvRDZCLGlCQUFPNUIsSUFBM0QsRUFDVDRCLGlCQUFPekIsSUFERSxDQUFYOztBQUdBd0IsS0FBS0osS0FBTCIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFB0cixcbiAgc3BpbmFsQ29yZVxufSBmcm9tIFwiLi9jb25zdGFudHNcIjtcblxuXG5pbXBvcnQgU3BpbmFsQ2FsTm9kZSBmcm9tIFwiLi9TcGluYWxDYWxOb2RlXCI7XG5pbXBvcnQgU3BpbmFsQ2FsY3VsYXRlIGZyb20gJy4vU3BpbmFsQ2FsY3VsYXRlJ1xuXG5pbXBvcnQgY29uZmlnIGZyb20gXCIuLi9jb25maWcuanNvblwiO1xuXG5cbmNsYXNzIE1haW4ge1xuXG4gIGNvbnN0cnVjdG9yKHVzZXJuYW1lLCBwYXNzd29yZCwgaG9zdCwgcG9ydCwgZmlsZVBhdGgpIHtcbiAgICB0aGlzLnVybCA9IGBodHRwOi8vJHt1c2VybmFtZX06JHtwYXNzd29yZH1AJHtob3N0fToke3BvcnR9L2A7XG4gICAgdGhpcy5wYXRoID0gZmlsZVBhdGg7XG4gIH1cblxuICBnZXRHcmFwaChfZmlsZSkge1xuXG4gICAgaWYgKF9maWxlLmdyYXBoIGluc3RhbmNlb2YgUHRyKSB7XG4gICAgICByZXR1cm4gX2ZpbGUuZ3JhcGgubG9hZCgpO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKF9maWxlLmdyYXBoKTtcblxuICB9XG5cbiAgZ2V0QmltT2JqZWN0KF9ncmFwaCkge1xuICAgIHJldHVybiBfZ3JhcGguZ2V0Q29udGV4dChcIkJJTU9iamVjdENvbnRleHRcIilcbiAgICAgIC50aGVuKGJpbUNvbnRleHQgPT4ge1xuICAgICAgICBsZXQgYmltT2JqZWN0cyA9IFtdO1xuICAgICAgICByZXR1cm4gYmltQ29udGV4dC5nZXRDaGlsZHJlbihbXCJoYXNCSU1PYmplY3RcIl0pLnRoZW4oYmltcyA9PiB7XG4gICAgICAgICAgYmltcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgYmltT2JqZWN0cy5wdXNoKG5ldyBTcGluYWxDYWxOb2RlKGVsZW1lbnQpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gYmltT2JqZWN0cztcbiAgICAgICAgfSlcblxuICAgICAgfSlcbiAgfVxuXG4gIHN0YXJ0KCkge1xuICAgIHNwaW5hbENvcmUubG9hZChzcGluYWxDb3JlLmNvbm5lY3QodGhpcy51cmwpLCB0aGlzLnBhdGgsIF9maWxlID0+IHtcbiAgICAgIHRoaXMuZ2V0R3JhcGgoX2ZpbGUpLnRoZW4oZ3JhcGggPT4ge1xuICAgICAgICB0aGlzLmdldEJpbU9iamVjdChncmFwaCkudGhlbihiaW1PYmplY3RzID0+IHtcbiAgICAgICAgICBuZXcgU3BpbmFsQ2FsY3VsYXRlKGJpbU9iamVjdHMpO1xuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cblxuXG5cbn1cblxuXG5cbmxldCBtYWluID0gbmV3IE1haW4oY29uZmlnLnVzZXIsIGNvbmZpZy5wYXNzd29yZCwgY29uZmlnLmhvc3QsIGNvbmZpZy5wb3J0LFxuICBjb25maWcucGF0aCk7XG5cbm1haW4uc3RhcnQoKTsiXX0=