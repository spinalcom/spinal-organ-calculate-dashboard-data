"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Lst = exports.spinalCore = exports.Ptr = exports.InputDataEndpointType = exports.SpinalBmsEndpoint = exports.BIMOBJECT_ENDPOINTS = exports.DASHBOARD_STANDARD_RELATION = exports.GEOGRAPHIC_RELATIONS = exports.BIMOBJECT = undefined;

var _spinalEnvViewerContextGeographicService = require("spinal-env-viewer-context-geographic-service");

var _spinalEnvViewerContextGeographicService2 = _interopRequireDefault(_spinalEnvViewerContextGeographicService);

var _spinalEnvViewerDashboardStandardService = require("spinal-env-viewer-dashboard-standard-service");

var _spinalModelBmsnetwork = require("spinal-model-bmsnetwork");

var _spinalCoreConnectorjs_type = require("spinal-core-connectorjs_type");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const BIMOBJECT = _spinalEnvViewerContextGeographicService2.default.constants.EQUIPMENT_TYPE;
const GEOGRAPHIC_RELATIONS = _spinalEnvViewerContextGeographicService2.default.constants.GEOGRAPHIC_RELATIONS;
const DASHBOARD_STANDARD_RELATION = _spinalEnvViewerDashboardStandardService.dashboardVariables.ENDPOINT_RELATION_NAME;
const BIMOBJECT_ENDPOINTS = ["hasEndPoint", _spinalModelBmsnetwork.SpinalBmsDevice.relationName, _spinalModelBmsnetwork.SpinalBmsEndpoint.relationName, _spinalModelBmsnetwork.SpinalBmsEndpointGroup.relationName];

exports.BIMOBJECT = BIMOBJECT;
exports.GEOGRAPHIC_RELATIONS = GEOGRAPHIC_RELATIONS;
exports.DASHBOARD_STANDARD_RELATION = DASHBOARD_STANDARD_RELATION;
exports.BIMOBJECT_ENDPOINTS = BIMOBJECT_ENDPOINTS;
exports.SpinalBmsEndpoint = _spinalModelBmsnetwork.SpinalBmsEndpoint;
exports.InputDataEndpointType = _spinalModelBmsnetwork.InputDataEndpointType;
exports.Ptr = _spinalCoreConnectorjs_type.Ptr;
exports.spinalCore = _spinalCoreConnectorjs_type.spinalCore;
exports.Lst = _spinalCoreConnectorjs_type.Lst;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25zdGFudHMuanMiXSwibmFtZXMiOlsiQklNT0JKRUNUIiwiZ2VvZ3JhcGhpY1NlcnZpY2UiLCJjb25zdGFudHMiLCJFUVVJUE1FTlRfVFlQRSIsIkdFT0dSQVBISUNfUkVMQVRJT05TIiwiREFTSEJPQVJEX1NUQU5EQVJEX1JFTEFUSU9OIiwiZGFzaGJvYXJkVmFyaWFibGVzIiwiRU5EUE9JTlRfUkVMQVRJT05fTkFNRSIsIkJJTU9CSkVDVF9FTkRQT0lOVFMiLCJTcGluYWxCbXNEZXZpY2UiLCJyZWxhdGlvbk5hbWUiLCJTcGluYWxCbXNFbmRwb2ludCIsIlNwaW5hbEJtc0VuZHBvaW50R3JvdXAiLCJJbnB1dERhdGFFbmRwb2ludFR5cGUiLCJQdHIiLCJzcGluYWxDb3JlIiwiTHN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7QUFDQTs7QUFHQTs7QUFNQTs7OztBQU9BLE1BQU1BLFlBQVlDLGtEQUFrQkMsU0FBbEIsQ0FBNEJDLGNBQTlDO0FBQ0EsTUFBTUMsdUJBQXVCSCxrREFBa0JDLFNBQWxCLENBQTRCRSxvQkFBekQ7QUFDQSxNQUFNQyw4QkFBOEJDLDREQUFtQkMsc0JBQXZEO0FBQ0EsTUFBTUMsc0JBQXNCLENBQzFCLGFBRDBCLEVBRTFCQyx1Q0FBZ0JDLFlBRlUsRUFHMUJDLHlDQUFrQkQsWUFIUSxFQUkxQkUsOENBQXVCRixZQUpHLENBQTVCOztRQVVFVixTLEdBQUFBLFM7UUFDQUksb0IsR0FBQUEsb0I7UUFDQUMsMkIsR0FBQUEsMkI7UUFDQUcsbUIsR0FBQUEsbUI7UUFDQUcsaUIsR0FBQUEsd0M7UUFDQUUscUIsR0FBQUEsNEM7UUFDQUMsRyxHQUFBQSwrQjtRQUNBQyxVLEdBQUFBLHNDO1FBQ0FDLEcsR0FBQUEsK0IiLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdlb2dyYXBoaWNTZXJ2aWNlIGZyb20gXCJzcGluYWwtZW52LXZpZXdlci1jb250ZXh0LWdlb2dyYXBoaWMtc2VydmljZVwiO1xuaW1wb3J0IHtcbiAgZGFzaGJvYXJkVmFyaWFibGVzXG59IGZyb20gXCJzcGluYWwtZW52LXZpZXdlci1kYXNoYm9hcmQtc3RhbmRhcmQtc2VydmljZVwiO1xuaW1wb3J0IHtcbiAgU3BpbmFsQm1zRW5kcG9pbnQsXG4gIFNwaW5hbEJtc0RldmljZSxcbiAgU3BpbmFsQm1zRW5kcG9pbnRHcm91cCxcbiAgSW5wdXREYXRhRW5kcG9pbnRUeXBlXG59IGZyb20gXCJzcGluYWwtbW9kZWwtYm1zbmV0d29ya1wiO1xuaW1wb3J0IHtcbiAgUHRyLFxuICBMc3QsXG4gIHNwaW5hbENvcmVcbn0gZnJvbSBcInNwaW5hbC1jb3JlLWNvbm5lY3RvcmpzX3R5cGVcIjtcblxuXG5jb25zdCBCSU1PQkpFQ1QgPSBnZW9ncmFwaGljU2VydmljZS5jb25zdGFudHMuRVFVSVBNRU5UX1RZUEVcbmNvbnN0IEdFT0dSQVBISUNfUkVMQVRJT05TID0gZ2VvZ3JhcGhpY1NlcnZpY2UuY29uc3RhbnRzLkdFT0dSQVBISUNfUkVMQVRJT05TO1xuY29uc3QgREFTSEJPQVJEX1NUQU5EQVJEX1JFTEFUSU9OID0gZGFzaGJvYXJkVmFyaWFibGVzLkVORFBPSU5UX1JFTEFUSU9OX05BTUU7XG5jb25zdCBCSU1PQkpFQ1RfRU5EUE9JTlRTID0gW1xuICBcImhhc0VuZFBvaW50XCIsXG4gIFNwaW5hbEJtc0RldmljZS5yZWxhdGlvbk5hbWUsXG4gIFNwaW5hbEJtc0VuZHBvaW50LnJlbGF0aW9uTmFtZSxcbiAgU3BpbmFsQm1zRW5kcG9pbnRHcm91cC5yZWxhdGlvbk5hbWVcbl07XG5cblxuXG5leHBvcnQge1xuICBCSU1PQkpFQ1QsXG4gIEdFT0dSQVBISUNfUkVMQVRJT05TLFxuICBEQVNIQk9BUkRfU1RBTkRBUkRfUkVMQVRJT04sXG4gIEJJTU9CSkVDVF9FTkRQT0lOVFMsXG4gIFNwaW5hbEJtc0VuZHBvaW50LFxuICBJbnB1dERhdGFFbmRwb2ludFR5cGUsXG4gIFB0cixcbiAgc3BpbmFsQ29yZSxcbiAgTHN0XG59Il19