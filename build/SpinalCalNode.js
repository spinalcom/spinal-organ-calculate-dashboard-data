"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _spinalEnvViewerGraphService = require("spinal-env-viewer-graph-service");

var _constants = require("./constants");

var _SpinalCalEndpoint = require("./SpinalCalEndpoint");

var _SpinalCalEndpoint2 = _interopRequireDefault(_SpinalCalEndpoint);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const {
  dashboardVariables
} = require("spinal-env-viewer-dashboard-standard-service");

class SpinalCalNode {

  constructor(node) {
    this.node = node;
    this.binded = null;
    this.maped = new Map();
  }

  isBimObject() {
    return this.node.getType().get() === _constants.BIMOBJECT;
  }

  getParents() {
    let relationRefPromises = [];

    _constants.GEOGRAPHIC_RELATIONS.forEach(relation => {
      let relationList = this.node.parents[relation];

      if (relationList) {

        for (let i = 0; i < relationList.length; i++) {
          const ref = relationList[i];
          relationRefPromises.push(ref.load());
        }
      }
    });

    return Promise.all(relationRefPromises).then(refs => {

      let promises = [];

      refs.forEach(node => {
        promises.push(node.parent.load());
      });

      return Promise.all(promises).then(parents => {
        let p = [];
        parents.forEach(el => {
          if (el && !(el instanceof _spinalEnvViewerGraphService.SpinalContext)) {
            p.push(new SpinalCalNode(el));
          }
        });

        return p;
      });
    });
  }

  getEndpointNodeByType(endpointType) {

    let refId = this.getRef(endpointType);
    if (refId) {

      // Si la node a une reference
      let node = _spinalEnvViewerGraphService.SpinalGraphService.getRealNode(refId);

      if (node) {

        return Promise.resolve(new _SpinalCalEndpoint2.default(node));
      } else {

        return this.node.find(_constants.BIMOBJECT_ENDPOINTS, node => {
          return node.info.id.get() === refId;
        }).then(el => {
          if (el && el.length > 0) {
            return new _SpinalCalEndpoint2.default(el[0]);
          }
          return undefined;
        });
      }
    } else {

      // si la node n'a pas de reference
      if (this.isBimObject()) {
        //si le node est un bimObject

        return this.node.find(_constants.BIMOBJECT_ENDPOINTS, node => {
          return node.getType().get() === _constants.SpinalBmsEndpoint.nodeTypeName;
        }).then(spinalNodes => {

          let nodeElements = spinalNodes.map((() => {
            var _ref = _asyncToGenerator(function* (node) {
              return {
                node: node,
                element: yield node.getElement()
              };
            });

            return function (_x) {
              return _ref.apply(this, arguments);
            };
          })());

          return Promise.all(nodeElements).then(el => {
            for (let i = 0; i < el.length; i++) {
              const element = el[i];
              if (element.element.type.get() === endpointType) {
                this.setRef(endpointType, element.node.info.id.get());
                return new _SpinalCalEndpoint2.default(element.node);
              }
            }
            return undefined;
          });
        });
      } else {
        // si la node n'est pas un bimObject
        return this.node.getChildren([_constants.DASHBOARD_STANDARD_RELATION]).then(children => {

          let nodeElements = children.map((() => {
            var _ref2 = _asyncToGenerator(function* (node) {

              return {
                node: node,
                element: yield node.getElement()
              };
            });

            return function (_x2) {
              return _ref2.apply(this, arguments);
            };
          })());

          return Promise.all(nodeElements).then(el => {
            for (let i = 0; i < el.length; i++) {
              const element = el[i];
              if (element.element.type.get() === endpointType) {
                return new _SpinalCalEndpoint2.default(element.node);
              }
            }
            return undefined;
          });
        });
      }
    }
  }

  getRef(endpointType) {
    return this.node.info.reference && this.node.info.reference[endpointType] ? this.node.info.reference[endpointType].get() : undefined;
  }

  setRef(endpointType, value) {

    if (!this.node.info.reference) {
      this.node.info.add_attr({
        reference: {}
      });
    }

    if (!this.node.info.reference[endpointType]) {
      this.node.info.reference.add_attr(endpointType, value);
      return;
    }

    this.node.info.reference[endpointType].set(value);
    return;
  }

  bindChild(type, callback) {
    this.getEndpointNodeByType(type).then(endpointNode => {
      if (endpointNode) {
        let mapped = this.maped.get(type);

        if (mapped && mapped.node.info.id.get() !== endpointNode.node.info.id.get()) {
          mapped.unbindEndpoint();
        }

        this.maped.set(type, endpointNode);
        endpointNode.bindEndpoint(callback);
      }
    });
  }

  bind() {
    this.binded = this.node.info.bind(() => {
      for (let type in _constants.InputDataEndpointType) {
        if (isNaN(type) && type !== "Other") {
          this.bindChild(type, () => {
            this.calculateParent(type);
          });
        }
      }
    });
  }

  unbind() {
    this.node.info.unbind(this.binded);
  }

  getChildren() {
    return this.node.getChildren(_constants.GEOGRAPHIC_RELATIONS).then(res => {
      let children = [];
      res.forEach(child => {
        children.push(new SpinalCalNode(child));
      });
      return children;
    });
  }

  getChildrenEndpoints(type) {

    return this.getChildren().then(children => {
      let promises = [];
      children.forEach(element => {
        promises.push(element.getEndpointNodeByType(type));
      });

      return Promise.all(promises).then(childEndpoint => {

        let pro = childEndpoint.map(el => {
          if (el) {

            return el.getCurrentValue();
          }
          return;
        });

        return Promise.all(pro).then(values => {
          return values.filter(el => el !== undefined);
        });
      });
    });
  }

  getUnit(type) {
    return this.getChildren().then(children => {
      let promises = [];
      children.forEach(element => {
        promises.push(element.getEndpointNodeByType(type));
      });

      return Promise.all(promises).then(childEndpoint => {

        let pro = childEndpoint.map(el => {
          if (el) {
            return el.node.element.load();
          }
          return;
        });

        return Promise.all(pro).then(endpoints => {
          endpoints = endpoints.filter(el => typeof el !== "undefined");

          return endpoints.map(el => {
            return el.unit ? el.unit.get() : undefined;
          })[0];
        });
      });
    });
  }

  calculateParent(type) {

    this.getParents().then(parents => {
      parents.forEach(parent => {

        parent.getEndpointNodeByType(type).then((() => {
          var _ref3 = _asyncToGenerator(function* (parentEndpoint) {
            if (parentEndpoint) {

              let rule = parentEndpoint.getRule();

              if (rule !== dashboardVariables.CALCULATION_RULES.reference) {
                let values = yield parent.getChildrenEndpoints(type); // getChildren EndpointsValue and unit

                let unit = yield parent.getUnit(type);

                switch (rule) {
                  case dashboardVariables.CALCULATION_RULES.sum:
                    (function () {
                      let sum = values.reduce(function (a, b) {
                        return a + b;
                      }, 0);
                      parentEndpoint.setEndpoint(sum, unit).then(function () {
                        parent.calculateParent(type);
                      });
                    })();
                    break;
                  case dashboardVariables.CALCULATION_RULES.average:
                    (function () {
                      let sum = values.reduce(function (a, b) {
                        return a + b;
                      }, 0);
                      parentEndpoint.setEndpoint(sum / values.length, unit).then(function () {
                        parent.calculateParent(type);
                      });
                    })();
                    break;
                  case dashboardVariables.CALCULATION_RULES.max:
                    parentEndpoint.setEndpoint(Math.max(...values), unit).then(function () {
                      parent.calculateParent(type);
                    });
                    break;
                  case dashboardVariables.CALCULATION_RULES.min:
                    parentEndpoint.setEndpoint(Math.min(...values), unit).then(function () {
                      parent.calculateParent(type);
                    });
                    break;
                }
              } else {
                let id = parentEndpoint.getReference();
                parent.getChildren().then(function (el) {
                  let ref;
                  for (let i = 0; i < el.length; i++) {
                    const element = el[i];
                    if (element.node.info.id.get() == id) ref = element;
                  }

                  if (ref) {
                    ref.getEndpointNodeByType(type).then(function (endpointCalNode) {
                      if (endpointCalNode) {
                        endpointCalNode.getCurrentValue().then((() => {
                          var _ref4 = _asyncToGenerator(function* (value) {
                            let endpoint = yield endpointCalNode.node.element.load();
                            let unit = endpoint.unit ? endpoint.unit.get() : undefined;
                            parentEndpoint.setEndpoint(value, unit);
                          });

                          return function (_x4) {
                            return _ref4.apply(this, arguments);
                          };
                        })());
                      }
                    });
                  }
                });
              }
            }
          });

          return function (_x3) {
            return _ref3.apply(this, arguments);
          };
        })());
      });
    });
  }

}
exports.default = SpinalCalNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,